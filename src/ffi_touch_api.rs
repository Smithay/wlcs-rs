/* automatically generated by rust-bindgen 0.64.0 */
//! * [touch](https://github.com/MirServer/wlcs/blob/main/include/wlcs/touch.h)
//!

#![allow(non_camel_case_types, non_snake_case, missing_docs)]

use wayland_sys::common::wl_fixed_t;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WlcsTouch {
    #[doc = "< Version of the struct this instance provides"]
    pub version: u32,
    pub touch_down: ::std::option::Option<
        unsafe extern "C" fn(touch: *mut WlcsTouch, x: wl_fixed_t, y: wl_fixed_t),
    >,
    pub touch_move: ::std::option::Option<
        unsafe extern "C" fn(touch: *mut WlcsTouch, x: wl_fixed_t, y: wl_fixed_t),
    >,
    pub touch_up: ::std::option::Option<unsafe extern "C" fn(touch: *mut WlcsTouch)>,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(touch: *mut WlcsTouch)>,
}
#[test]
fn bindgen_test_layout_WlcsTouch() {
    const UNINIT: ::std::mem::MaybeUninit<WlcsTouch> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WlcsTouch>(),
        40usize,
        concat!("Size of: ", stringify!(WlcsTouch))
    );
    assert_eq!(
        ::std::mem::align_of::<WlcsTouch>(),
        8usize,
        concat!("Alignment of ", stringify!(WlcsTouch))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WlcsTouch),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).touch_down) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WlcsTouch),
            "::",
            stringify!(touch_down)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).touch_move) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WlcsTouch),
            "::",
            stringify!(touch_move)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).touch_up) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WlcsTouch),
            "::",
            stringify!(touch_up)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WlcsTouch),
            "::",
            stringify!(destroy)
        )
    );
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
